{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Disc","styled","div","props","color","size","margin","zindex","App","w","window","innerWidth","React","useState","step","setStep","disc","setDisc","count","counter","length","step_","towerA","towerB","towerC","setTimeout","i","elem1","document","getElementById","console","log","style","left","transform","elem2","elem3","updateTowers","getSolution","num","a","Axios","method","url","data","solution","alert","useEffect","COLOR","1","2","3","4","5","6","7","8","className","result","push","key","id","renderDisc","placeholder","type","onChange","e","parseInt","target","value","onClick","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4eAKA,IAAMA,EAAOC,IAAOC,IAAV,KACgB,SAAAC,GAAK,OAAIA,EAAMC,SACzB,SAAAD,GAAK,OAAIA,EAAME,QAChB,SAAAF,GAAK,OAAIA,EAAME,QACd,SAAAF,GAAK,OAAIA,EAAMG,UACd,SAAAH,GAAK,OAAIA,EAAMI,UAwGjBC,MArGf,WACE,IAAIC,EAAIC,OAAOC,WADF,EAEUC,IAAMC,SAAS,IAFzB,mBAENC,EAFM,KAEDC,EAFC,OAGSH,IAAMC,SAAS,GAHxB,mBAGNG,EAHM,KAGDC,EAHC,KAmCXC,EAAS,EACNC,EAAU,SAAVA,MAGCD,EACWJ,EAAKM,QApCH,SAACC,GAClB,IAAIC,EAASD,EAAM,GACfE,EAASF,EAAM,GACfG,EAASH,EAAM,GACnBX,OAAOe,YAAW,WAChB,IAAI,IAAIC,EAAI,EAAGA,EAAIJ,EAAOF,OAAQM,GAAK,EACvC,CACE,IAAIC,EAAQC,SAASC,eAAe,QAAQP,EAAOI,IACnDI,QAAQC,IAAIJ,GACZA,EAAMK,MAAMC,KAAO,QACnBN,EAAMK,MAAME,UAAW,eAGzB,IAAI,IAAIR,EAAI,EAAGA,EAAIH,EAAOH,OAAQM,GAAK,EACvC,CACE,IAAIS,EAAQP,SAASC,eAAe,QAAQN,EAAOG,IACnDS,EAAMH,MAAMC,KAAOxB,EAAI,IAAM,KAC7B0B,EAAMH,MAAME,UAAY,iBAI1B,IAAI,IAAIR,EAAI,EAAGA,EAAIF,EAAOJ,OAAQM,GAAK,EACvC,CACE,IAAIU,EAAQR,SAASC,eAAe,QAAQL,EAAOE,IACnDU,EAAMJ,MAAMC,KAAOxB,EAAI,IAAM,KAE7B2B,EAAMJ,MAAME,UAAY,oBAG1B,KAQMG,CAAavB,EAAKI,IAGtBO,WAAWN,EAAS,MAGpBmB,EAAW,uCAAI,WAAMC,GAAN,eAAAC,EAAA,+EAEMC,IAAM,CACzBC,OAAQ,OACRC,IAAK,gCACLC,KAAM,CACJ,eAAmBL,KANR,OAEXM,EAFW,OASf9B,EAAQ8B,EAASD,MATF,gDAWjBE,MAAM,EAAD,IAXY,yDAAJ,sDAcjBlC,IAAMmC,WAAU,WACd5B,OAGF,IAAM6B,EAAQ,CACZC,EAAI,UACJC,EAAI,UACJC,EAAI,UACJC,EAAI,UACJC,EAAI,UACJC,EAAI,UACJC,EAAI,UACJC,EAAI,WAcN,OACC,yBAAKC,UAAU,WACV,yBAAKA,UAAU,QAbF,WAGjB,IADA,IAAIC,EAAS,GACLhC,EAAKV,EAAMU,EAAI,EAAGA,IAC1BgC,EAAOC,KACL,kBAAC3D,EAAD,CAAM4D,IAAOlC,EAAGmC,GAAI,QAASnC,EAAGnB,OAAQS,EAAOU,EAAGrB,KAAU,GAAJqB,EAAS,GAAIpB,OAAQ,GAAK,KAAOoB,EAAGtB,MAAO4C,EAAMtB,MAG3G,OAAOgC,EAMAI,IAEH,8BACE,2BAAOC,YAAY,sBAAsBC,KAAK,SAASC,SAAU,SAACC,GAAD,OAAOjD,EAAQkD,SAASD,EAAEE,OAAOC,MAAM,QACxG,4BAAQL,KAAK,SAASM,QAAS,kBAAMhC,EAAYtB,KAAjD,YC/FUuD,QACW,cAA7B7D,OAAO8D,SAASC,UAEe,UAA7B/D,OAAO8D,SAASC,UAEhB/D,OAAO8D,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjD,SAASC,eAAe,SDyHpB,kBAAmBiD,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvD,QAAQuD,MAAMA,EAAMC,c","file":"static/js/main.051512df.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport './App.css';\nimport styled from 'styled-components'\nimport Axios from 'axios'\n\nconst Disc = styled.div`\n      background-color: ${props => props.color};\n      height: ${props => props.size}px;\n      width: ${props => props.size}px;\n      margin: ${props => props.margin}px;\n      z-index: ${props => props.zindex};\n`\n\nfunction App() {\n  var w = window.innerWidth;\n  const [step,setStep] = React.useState([])\n  const [disc,setDisc] =React.useState(3)\n  var updateTowers = (step_) => {\n    let towerA = step_[0]\n    let towerB = step_[1]\n    let towerC = step_[2]\n    window.setTimeout(() => {\n      for(let i = 0; i < towerA.length; i += 1)\n      {\n        var elem1 = document.getElementById(\"disc-\"+towerA[i]);\n        console.log(elem1)\n        elem1.style.left = 180 + 'px'\n        elem1.style.transform =\"rotate(0deg)\"\n      }\n      \n      for(let i = 0; i < towerB.length; i += 1)\n      {\n        var elem2 = document.getElementById(\"disc-\"+towerB[i]);\n        elem2.style.left = w - 800 + 'px'\n        elem2.style.transform = \"rotate(360deg)\"\n   \n      }\n      \n      for(let i = 0; i < towerC.length; i += 1)\n      {\n        var elem3 = document.getElementById(\"disc-\"+towerC[i]);\n        elem3.style.left = w - 500 + \"px\"\n        \n        elem3.style.transform = \"rotate(720deg)\"\n      }\n   \n    },1000)\n  }\nvar count  = 0\n const counter = () =>\n      {\n        \n        count++;\n        if(count < step.length){\n            updateTowers(step[count])\n        }\n       \n        setTimeout(counter, 1000);\n      }\n  \n  const getSolution =  async(num) => {\n    try {\n        let solution = await Axios({\n          method: 'post',\n          url: 'http://localhost:5000/process',\n          data: {\n            \"number_of_disc\" : num\n          }\n        })\n        setStep(solution.data)\n    } catch (error) {\n      alert(error)\n    }\n  } \n  React.useEffect(() => {\n    counter()\n  })\n \n  const COLOR = {\n    1 : '#14274e',\n    2 : '#0e918c',\n    3 : '#f6830f',\n    4 : '#794c74',\n    5 : '#150485',\n    6 : '#f0a500',\n    7 : '#1a1a2e',\n    8 : '#91d18b'\n  }\n \n  const renderDisc = () => {\n    \n    let result = []\n    for(let i  = disc; i > 0; i--){\n    result.push(\n      <Disc key = {i} id={`disc-`+ i} zindex={disc - i} size={i * 50 + 40} margin={30 - 23.5 * i} color={COLOR[i]}></Disc>\n    )\n    }\n    return result\n  }\n\n  return (\n   <div className=\"wrapper\">\n        <div className=\"anim\">\n          {renderDisc()}    \n        </div>\n        <form>\n          <input placeholder=\"Type number of disc\" type=\"number\" onChange={(e) => setDisc(parseInt(e.target.value,10)) }/>\n          <button type=\"button\" onClick={() => getSolution(disc)}>Start</button>\n        </form>\n      \n   </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}