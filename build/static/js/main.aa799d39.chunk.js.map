{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Disc","styled","div","props","color","size","margin","zindex","App","w","window","innerWidth","React","useState","step","setStep","disc","setDisc","show","setShow","loading","setLoading","count","counter","length","step_","towerA","towerB","towerC","setTimeout","i","elem1","document","getElementById","console","log","style","left","transform","elem2","elem3","updateTowers","getSolution","num","a","Axios","method","url","headers","data","solution","alert","useEffect","COLOR","1","2","3","4","5","6","7","8","Container","className","Modal","centered","backdrop","keyboard","Header","Title","Body","Form","Group","FormControl","placeholder","type","onChange","e","parseInt","target","value","Footer","Button","onClick","Spinner","animation","variant","result","push","key","id","renderDisc","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.aa799d39.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport './App.css';\nimport {Button,Container,Modal,InputGroup,FormControl,Form,Spinner} from 'react-bootstrap'\nimport styled from 'styled-components'\nimport Axios from 'axios'\n\nconst Disc = styled.div`\n      background-color: ${props => props.color};\n      height: ${props => props.size}px;\n      width: ${props => props.size}px;\n      margin: ${props => props.margin}px;\n      z-index: ${props => props.zindex};\n`\n\nfunction App() {\n  var w = window.innerWidth;\n  const [step,setStep] = React.useState([])\n  const [disc,setDisc] =React.useState(3)\n  const [show,setShow] = React.useState(true)\n  const [loading,setLoading] = React.useState(false)\n  var updateTowers = (step_) => {\n    let towerA = step_[0]\n    let towerB = step_[1]\n    let towerC = step_[2]\n    window.setTimeout(() => {\n      for(let i = 0; i < towerA.length; i += 1)\n      {\n        var elem1 = document.getElementById(\"disc-\"+towerA[i]);\n        console.log(elem1)\n        elem1.style.left = 180 + 'px'\n        elem1.style.transform =\"rotate(0deg)\"\n      }\n      \n      for(let i = 0; i < towerB.length; i += 1)\n      {\n        var elem2 = document.getElementById(\"disc-\"+towerB[i]);\n        elem2.style.left = w - 800 + 'px'\n        elem2.style.transform = \"rotate(360deg)\"\n   \n      }\n      \n      for(let i = 0; i < towerC.length; i += 1)\n      {\n        var elem3 = document.getElementById(\"disc-\"+towerC[i]);\n        elem3.style.left = w - 500 + \"px\"\n        \n        elem3.style.transform = \"rotate(720deg)\"\n      }\n   \n    },1000)\n  }\nvar count  = 0\n const counter = () =>\n      {\n        \n        count++;\n        if(count < step.length){\n            updateTowers(step[count])\n        }\n       \n       \n        setTimeout(counter, 1000);\n       \n      }\n  \n  const getSolution =  async(num) => {\n    setLoading(true)\n    try {\n        let solution = await Axios({\n          method: 'POST',\n          url: '/process',\n          headers: { 'Content-Type': 'application/json'},\n          data: {\n            \"number_of_disc\" : num\n          }\n        })\n        \n        setStep(solution.data)\n        setLoading(false)\n        setShow(false)\n      \n    } catch (error) {\n      alert(error)\n      setShow(true)\n      setLoading(false)\n    }\n  } \n  React.useEffect(() => {\n    counter()\n  })\n  \n  const COLOR = {\n    1 : '#5a189a',\n    2 : '#03045e',\n    3 : '#ee6c4d',\n    4 : '#4361ee',\n    5 : '#b298dc',\n    6 : '#f0a500',\n    7 : '#1a1a2e',\n    8 : '#91d18b'\n  }\n  const renderDisc = () => {\n    \n    let result = []\n    for(let i  = disc; i > 0; i--){\n    result.push(\n      <Disc \n        key = {i} \n        id={`disc-`+ i} \n        zindex={disc - i} \n        size={i * 50 + 40} \n        margin={30 - 23.5 * i} \n        color={COLOR[i]}>\n      </Disc>\n    )\n    }\n    return result\n  }\n  console.log(step)\n  return (\n  \n  <Container className=\"wrapper d-flex align-items-center\">\n    <Modal\n        show={show}\n        centered\n        backdrop=\"static\"\n        keyboard={false}\n      >\n        <Modal.Header>\n          <Modal.Title>Tháp Hà Nội</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n         <p>Bài toán tháp Hà Nội sử dụng thuật toán tìm kiếm sâu dần</p>\n         <Form.Group>\n          <FormControl\n            placeholder=\"Nhập số lượng đĩa\"\n            type=\"number\"\n            onChange={(e) => setDisc(parseInt(e.target.value,10))}\n          />\n          </Form.Group> \n         \n        </Modal.Body>\n        <Modal.Footer>\n          {loading ? \n          <Button className=\"w-25\" onClick={() => getSolution(disc)}>\n           <Spinner animation=\"border\" size=\"sm\" variant=\"light\" />\n          </Button>\n          :\n          <Button className=\"w-25\" onClick={() => getSolution(disc)}>\n            Bắt đầu\n          </Button>\n          }\n          \n            \n        </Modal.Footer>\n      </Modal>\n      <div className=\"anim\">\n          {renderDisc()}\n      </div> \n  </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}